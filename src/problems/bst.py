# Check for BSTimport mathdef left_root_right_visit_r(arr, k):    if not (arr and 0 <= k < len(arr)):        return []    left_sub_tree = left_root_right_visit_r(arr, 2*k+1) if 0 <= 2*k+1 < len(arr) else None    right_sub_tree = left_root_right_visit_r(arr, 2*k+2) if 0 <= 2*k+2 < len(arr) else None            out_arr = []    if left_sub_tree:        out_arr.extend(left_sub_tree)    out_arr.append(arr[k])    if right_sub_tree:        out_arr.extend(right_sub_tree)        return out_arrdef left_root_right(n):    todo = [(False, 0)] if n > 0 else []        while len(todo) > 0:        counts = len(todo)        visited, node = todo.pop()        if 0 <= node < n:                        if 0 <= 2*node+2 < n:                todo.append((True, 2*node+2))            todo.append((False, node))                        if 0 <= 2*node+1 < n:                todo.append((False, 2*node+1))                else:            todo.append((visited, node))                    if counts == len(todo):            while True:                if len(todo) <= 0:                    break                visited, node = todo.pop()                if visited:                    todo.append((visited, node))                    break                yield nodedef left_root_right_visit_nr(arr):    n = len(arr)    out_arr = [arr[node] for node in left_root_right(n)]         return out_arrdef left_root_right_visit(tree):    """                          0                            1  2^1 -1               1                     2                 3  2^2 -1  2^1         3           4          5           6          7  2^3 -1        7     8     9     10   11    12    13    14     15  2^4 -1    15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30   31  2^5 -1    """      return left_root_right_visit_r(tree, 0)    #return left_root_right_visit_nr(tree)    def heapify(arr):    """heapify a given tree with array representation.        empty nodes of the tree are replaced with None.            >>> a = [0, 1, 2]    >>> heapify_left_root_right(a)    []    """    passdef isBST(node):    """        """    arr = left_root_right_visit(node)        arr = [item for item in arr if item]    if arr and len(arr) > 0:        for i in range(len(arr)-1):            if arr[i] >= arr[i+1]:                return False    else:        return False            return True    